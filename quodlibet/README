Quod Libet - A Music Library/Player
========================================================================
Quod Libet is a music library management program. Rather than categorize
songs by genre, artist, and album, it keeps them all in one list that
you can filter however you want.

Quod Libet is designed for use with Ogg Vorbis audio files, but has
support for MP3 files following the ID3v1 and v2 "standards" as well.

Quod Libet is written in Python and licensed under the GNU GPL version 2.

====[ Neat Features
 - MP3, Ogg Vorbis, and FLAC audio format support.
 - Full support for the Vorbis comment format.
 - Album cover detection and display.
 - Regexp-based search support.

For a full description and list of features, see
http://www.sacredchao.net/~piman/software/quodlibet.shtml.

For the FAQ, updated regularly, see
http://www.sacredchao.net/~piman/software/quodlibet.shtml#faq.

====[ Requirements

==[ Debian / Debian-based OSs

You must be running 'unstable' or a recent snapshot of it.

# apt-get install python-pymad python-pyvorbis python-id3lib python-glade2

If you want tray icon or multimedia key support,
# apt-get install python2.3-dev python-gtk2-dev
# make extensions
prior to running 'make install' (or ./quodlibet.py).

==[ Other OSs

Find the above software and install it. PyGTK must be at least version 2.4,
or strange errors will happen. The Quod Libet website links to most of
the required software.

====[ Using QL
For help on using the program, run
 $ man -l ./quodlibet.1

If you are upgrading from 0.4 or earlier you may need to change your
audio backend to 'ao:alsa', which is currently the default setting. The
old default setting was 'oss'; 'ao:alsa' will fall back to OSS when
ao or ALSA is unavailable.

====[ Formal Query Grammar
This is a BNFish grammar that (at least when I checked it in) described
the grammar used for queries. It could be used for querying of a simple
key/value database.

Query           ::= QueryPart | QueryUnion | QueryInter | QueryNeg
QueryUnion      ::= '|(' QueryList ')'
QueryInter      ::= '&(' QueryList ')'
QueryNeg        ::= '!' Query
QueryList       ::= Query ',' QueryList | Query
QueryPart       ::= TagList '=' RegexpSet

TagList         ::= tag_name ',' TagList | tag_name

RegexpSet       ::= RegexpPart | RegexpUnion | RegexpInter | RegexpNeg
RegexpUnion     ::= '|(' RegexpList ')'
RegexpInter     ::= '&(' RegexpList ')'
RegexpNeg       ::= '!' RegexpSet
RegexpPart      ::= '/' regexp '/' [mods] | ':' regexp ':' [mods]
RegexpList      ::= RegexpPart ',' | regexp
